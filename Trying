import numpy as np
import matplotlib.pyplot as plt

# Initialise Variables
T_initial = 60  # Initial geyser temperature in Celsius
T_cold = 20     # Cold water temperature in Celsius
T_ambient = 25  # Ambient temperature in Celsius (environment temp)
T_set = 60      # Desired maximum temperature
T_threshold = 55  # Threshold below which the heating element turns on

# Geyser Physical Properties
water_capacity = 100  # Capacity of geyser in liters
height = 1.5  # Height of the geyser in meters
radius = 0.3  # Radius of the geyser in meters
surface_area = 2 * np.pi * radius * height  # Surface area in square meters

# Heat Loss Coefficient
k = 0.03  # Coefficient for exponential decay (adjusted for 0.01-hour time steps)

# Maximum Reheating Rate at Peak Power (2°C per minute or 13.95 kW)
max_reheating_rate_per_minute = 2
max_reheating_rate_per_time_step = max_reheating_rate_per_minute * 0.6  # Adjusted for 0.01-hour time steps (0.6 minutes)

# Time variables
time = np.arange(0, 24, 0.01)  # Time in hours (simulating a day with smaller time steps)
hot_water_usage = np.zeros_like(time)  # Empty array for hot water usage

# Simulate Hot Water Usage
for i, t in enumerate(time):
    if 7 <= t <= 8 or 19 <= t <= 20:
        hot_water_usage[i] = 20  # Use 20 liters during peak times

# Create Sinusoidal Power Supply Curve
A = 1  # Amplitude (scaling factor)
B = np.pi / 12  # Frequency for a 24-hour cycle (2 * pi over 24 hours)
C = 6.5  # Horizontal shift to peak at 12:00 PM
D = 0  # Vertical shift

# Power Supply Function (Normalized 0 to 1)
power_supply = A * np.sin(B * (time - C))  # Sine curve peaks at 12:00 PM
power_supply = np.clip(power_supply, 0, 1)  # Clip values to stay within 0 and 1

# Geyser Temperature over Time
temperature = np.full_like(time, T_initial)
heater_on = False  # Track whether the heater is on or off

# Simulation Loop with Exponential Decay for Heat Loss
for i in range(1, len(time)):
    # Calculate new temperature when hot water is used
    if hot_water_usage[i] > 0:
        used_water = hot_water_usage[i]
        inflow_water = used_water
        temperature[i] = ((temperature[i-1] * (water_capacity - inflow_water)) + (T_cold * inflow_water)) / water_capacity
    else:
        # Exponential heat loss when no water is used
        temperature[i] = T_ambient + (temperature[i-1] - T_ambient) * np.exp(-k * 0.01)

        # Heater turns on if temperature drops below the threshold
        if temperature[i] < T_threshold:
            heater_on = True

        # Determine whether to use constant power or sinusoidal power
        if heater_on:
            # From 21:00 (9 PM) to 05:00 (5 AM), use constant maximum power
            if (21 <= time[i] <= 24) or (0 <= time[i] < 7):
                current_reheating_rate = max_reheating_rate_per_time_step  # Constant max power
            else:
                current_reheating_rate = max_reheating_rate_per_time_step * power_supply[i]  # Scaled by power supply curve
            
            # Update the temperature gradually during reheating
            temperature[i] += current_reheating_rate

            # Heater turns off only when it reaches exactly 60°C
            if temperature[i] >= T_set:
                temperature[i] = T_set  # Ensure it caps at 60°C
                heater_on = False  # Turn off the heater

# Plot the Results
plt.figure(figsize=(12, 8))

# Hot Water Usage Plot
plt.subplot(3, 1, 1)
plt.plot(time, hot_water_usage, label='Hot Water Usage (litres)', color='orange')
plt.ylabel('Hot Water Usage (litres)')
plt.xlabel('Time (hours)')
plt.legend()

# Power Supply Plot
plt.subplot(3, 1, 2)
plt.plot(time, power_supply, label='Power Supply (Normalized)', color='g')
plt.axvspan(21, 24, color='lightgreen', alpha=0.3, label='Constant Power Supply Period (21-24)')
plt.axvspan(0, 7, color='lightgreen', alpha=0.3, label='Constant Power Supply Period (0-7)')
plt.ylabel('Power Supply (0 to 1)')
plt.xlabel('Time (hours)')
plt.legend()

# Geyser Temperature Plot
plt.subplot(3, 1, 3)
plt.plot(time, temperature, label='Geyser Temperature (°C)', color='r')
plt.ylabel('Temperature (°C)')
plt.xlabel('Time (hours)')
plt.legend()

plt.tight_layout()
plt.show()